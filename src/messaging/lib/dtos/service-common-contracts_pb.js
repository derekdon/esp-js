/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.devshop.service.common.contracts.AnyDto', null, global);
goog.exportSymbol('proto.com.devshop.service.common.contracts.DecimalDto', null, global);
goog.exportSymbol('proto.com.devshop.service.common.contracts.HeartbeatDto', null, global);
goog.exportSymbol('proto.com.devshop.service.common.contracts.MessageEnvelopeDto', null, global);
goog.exportSymbol('proto.com.devshop.service.common.contracts.OperationConfigDto', null, global);
goog.exportSymbol('proto.com.devshop.service.common.contracts.OperationTypeDto', null, global);
goog.exportSymbol('proto.com.devshop.service.common.contracts.TimestampDto', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.devshop.service.common.contracts.MessageEnvelopeDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.devshop.service.common.contracts.MessageEnvelopeDto.displayName = 'proto.com.devshop.service.common.contracts.MessageEnvelopeDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.toObject = function(opt_includeInstance) {
  return proto.com.devshop.service.common.contracts.MessageEnvelopeDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.devshop.service.common.contracts.MessageEnvelopeDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationName: msg.getOperationName(),
    timestamp: (f = msg.getTimestamp()) && proto.com.devshop.service.common.contracts.TimestampDto.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && proto.com.devshop.service.common.contracts.AnyDto.toObject(includeInstance, f),
    hasCompleted: msg.getHasCompleted(),
    error: msg.getError(),
    correlationId: msg.getCorrelationId(),
    sessionId: msg.getSessionId(),
    senderId: msg.getSenderId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.devshop.service.common.contracts.MessageEnvelopeDto}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.devshop.service.common.contracts.MessageEnvelopeDto;
  return proto.com.devshop.service.common.contracts.MessageEnvelopeDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.devshop.service.common.contracts.MessageEnvelopeDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.devshop.service.common.contracts.MessageEnvelopeDto}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationName(value);
      break;
    case 2:
      var value = new proto.com.devshop.service.common.contracts.TimestampDto;
      reader.readMessage(value,proto.com.devshop.service.common.contracts.TimestampDto.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.com.devshop.service.common.contracts.AnyDto;
      reader.readMessage(value,proto.com.devshop.service.common.contracts.AnyDto.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasCompleted(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.com.devshop.service.common.contracts.MessageEnvelopeDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperationName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.devshop.service.common.contracts.TimestampDto.serializeBinaryToWriter
    );
  }
  f = this.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.devshop.service.common.contracts.AnyDto.serializeBinaryToWriter
    );
  }
  f = this.getHasCompleted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getCorrelationId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getSenderId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.com.devshop.service.common.contracts.MessageEnvelopeDto} The clone.
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.cloneMessage = function() {
  return /** @type {!proto.com.devshop.service.common.contracts.MessageEnvelopeDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string operation_name = 1;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.getOperationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.setOperationName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional TimestampDto timestamp = 2;
 * @return {proto.com.devshop.service.common.contracts.TimestampDto}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.getTimestamp = function() {
  return /** @type{proto.com.devshop.service.common.contracts.TimestampDto} */ (
    jspb.Message.getWrapperField(this, proto.com.devshop.service.common.contracts.TimestampDto, 2));
};


/** @param {proto.com.devshop.service.common.contracts.TimestampDto|undefined} value  */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * optional AnyDto payload = 3;
 * @return {proto.com.devshop.service.common.contracts.AnyDto}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.getPayload = function() {
  return /** @type{proto.com.devshop.service.common.contracts.AnyDto} */ (
    jspb.Message.getWrapperField(this, proto.com.devshop.service.common.contracts.AnyDto, 3));
};


/** @param {proto.com.devshop.service.common.contracts.AnyDto|undefined} value  */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * optional bool has_completed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.getHasCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.setHasCompleted = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string error = 5;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.setError = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string correlation_id = 6;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.getCorrelationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.setCorrelationId = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string session_id = 7;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string sender_id = 8;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.getSenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.MessageEnvelopeDto.prototype.setSenderId = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.devshop.service.common.contracts.OperationConfigDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.devshop.service.common.contracts.OperationConfigDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.devshop.service.common.contracts.OperationConfigDto.displayName = 'proto.com.devshop.service.common.contracts.OperationConfigDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.toObject = function(opt_includeInstance) {
  return proto.com.devshop.service.common.contracts.OperationConfigDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.devshop.service.common.contracts.OperationConfigDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceType: msg.getServiceType(),
    operationName: msg.getOperationName(),
    serviceId: msg.getServiceId(),
    requiresAuthentication: msg.getRequiresAuthentication(),
    requestExchangeName: msg.getRequestExchangeName(),
    requestRoutingKey: msg.getRequestRoutingKey(),
    responseExchangeName: msg.getResponseExchangeName(),
    responseRoutingKey: msg.getResponseRoutingKey(),
    operationType: msg.getOperationType(),
    isAvailable: msg.getIsAvailable()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.devshop.service.common.contracts.OperationConfigDto}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.devshop.service.common.contracts.OperationConfigDto;
  return proto.com.devshop.service.common.contracts.OperationConfigDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.devshop.service.common.contracts.OperationConfigDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.devshop.service.common.contracts.OperationConfigDto}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequiresAuthentication(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestExchangeName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestRoutingKey(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseExchangeName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseRoutingKey(value);
      break;
    case 9:
      var value = /** @type {!proto.com.devshop.service.common.contracts.OperationTypeDto} */ (reader.readEnum());
      msg.setOperationType(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAvailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.com.devshop.service.common.contracts.OperationConfigDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getServiceType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOperationName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getServiceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getRequiresAuthentication();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getRequestExchangeName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getRequestRoutingKey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getResponseExchangeName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getResponseRoutingKey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getOperationType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = this.getIsAvailable();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.com.devshop.service.common.contracts.OperationConfigDto} The clone.
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.cloneMessage = function() {
  return /** @type {!proto.com.devshop.service.common.contracts.OperationConfigDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string service_type = 1;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getServiceType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setServiceType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string operation_name = 2;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getOperationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setOperationName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string service_id = 3;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getServiceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setServiceId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool requires_authentication = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getRequiresAuthentication = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setRequiresAuthentication = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string request_exchange_name = 5;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getRequestExchangeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setRequestExchangeName = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string request_routing_key = 6;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getRequestRoutingKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setRequestRoutingKey = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string response_exchange_name = 7;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getResponseExchangeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setResponseExchangeName = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string response_routing_key = 8;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getResponseRoutingKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setResponseRoutingKey = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional OperationTypeDto operation_type = 9;
 * @return {!proto.com.devshop.service.common.contracts.OperationTypeDto}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getOperationType = function() {
  return /** @type {!proto.com.devshop.service.common.contracts.OperationTypeDto} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {!proto.com.devshop.service.common.contracts.OperationTypeDto} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setOperationType = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool is_available = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.getIsAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 10, false));
};


/** @param {boolean} value  */
proto.com.devshop.service.common.contracts.OperationConfigDto.prototype.setIsAvailable = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.devshop.service.common.contracts.HeartbeatDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.devshop.service.common.contracts.HeartbeatDto.repeatedFields_, null);
};
goog.inherits(proto.com.devshop.service.common.contracts.HeartbeatDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.devshop.service.common.contracts.HeartbeatDto.displayName = 'proto.com.devshop.service.common.contracts.HeartbeatDto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.toObject = function(opt_includeInstance) {
  return proto.com.devshop.service.common.contracts.HeartbeatDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.devshop.service.common.contracts.HeartbeatDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceId: msg.getServiceId(),
    serviceType: msg.getServiceType(),
    operationConfigDtosList: jspb.Message.toObjectList(msg.getOperationConfigDtosList(),
    proto.com.devshop.service.common.contracts.OperationConfigDto.toObject, includeInstance),
    timestamp: (f = msg.getTimestamp()) && proto.com.devshop.service.common.contracts.TimestampDto.toObject(includeInstance, f),
    serviceLoad: msg.getServiceLoad()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.devshop.service.common.contracts.HeartbeatDto}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.devshop.service.common.contracts.HeartbeatDto;
  return proto.com.devshop.service.common.contracts.HeartbeatDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.devshop.service.common.contracts.HeartbeatDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.devshop.service.common.contracts.HeartbeatDto}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceType(value);
      break;
    case 3:
      var value = new proto.com.devshop.service.common.contracts.OperationConfigDto;
      reader.readMessage(value,proto.com.devshop.service.common.contracts.OperationConfigDto.deserializeBinaryFromReader);
      msg.getOperationConfigDtosList().push(value);
      msg.setOperationConfigDtosList(msg.getOperationConfigDtosList());
      break;
    case 4:
      var value = new proto.com.devshop.service.common.contracts.TimestampDto;
      reader.readMessage(value,proto.com.devshop.service.common.contracts.TimestampDto.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceLoad(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.com.devshop.service.common.contracts.HeartbeatDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getServiceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getServiceType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOperationConfigDtosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.com.devshop.service.common.contracts.OperationConfigDto.serializeBinaryToWriter
    );
  }
  f = this.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.devshop.service.common.contracts.TimestampDto.serializeBinaryToWriter
    );
  }
  f = this.getServiceLoad();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.com.devshop.service.common.contracts.HeartbeatDto} The clone.
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.cloneMessage = function() {
  return /** @type {!proto.com.devshop.service.common.contracts.HeartbeatDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string service_id = 1;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.getServiceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.setServiceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string service_type = 2;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.getServiceType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.setServiceType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated OperationConfigDto operation_config_dtos = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.com.devshop.service.common.contracts.OperationConfigDto>}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.getOperationConfigDtosList = function() {
  return /** @type{!Array.<!proto.com.devshop.service.common.contracts.OperationConfigDto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.devshop.service.common.contracts.OperationConfigDto, 3));
};


/** @param {Array.<!proto.com.devshop.service.common.contracts.OperationConfigDto>|undefined} value  */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.setOperationConfigDtosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.clearOperationConfigDtosList = function() {
  this.setOperationConfigDtosList([]);
};


/**
 * optional TimestampDto timestamp = 4;
 * @return {proto.com.devshop.service.common.contracts.TimestampDto}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.getTimestamp = function() {
  return /** @type{proto.com.devshop.service.common.contracts.TimestampDto} */ (
    jspb.Message.getWrapperField(this, proto.com.devshop.service.common.contracts.TimestampDto, 4));
};


/** @param {proto.com.devshop.service.common.contracts.TimestampDto|undefined} value  */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * optional int32 service_load = 5;
 * @return {number}
 */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.getServiceLoad = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.com.devshop.service.common.contracts.HeartbeatDto.prototype.setServiceLoad = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.devshop.service.common.contracts.AnyDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.devshop.service.common.contracts.AnyDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.devshop.service.common.contracts.AnyDto.displayName = 'proto.com.devshop.service.common.contracts.AnyDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.AnyDto.prototype.toObject = function(opt_includeInstance) {
  return proto.com.devshop.service.common.contracts.AnyDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.devshop.service.common.contracts.AnyDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.AnyDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    canonicalName: msg.getCanonicalName(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.devshop.service.common.contracts.AnyDto}
 */
proto.com.devshop.service.common.contracts.AnyDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.devshop.service.common.contracts.AnyDto;
  return proto.com.devshop.service.common.contracts.AnyDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.devshop.service.common.contracts.AnyDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.devshop.service.common.contracts.AnyDto}
 */
proto.com.devshop.service.common.contracts.AnyDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCanonicalName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.com.devshop.service.common.contracts.AnyDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.AnyDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.devshop.service.common.contracts.AnyDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.AnyDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCanonicalName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.com.devshop.service.common.contracts.AnyDto} The clone.
 */
proto.com.devshop.service.common.contracts.AnyDto.prototype.cloneMessage = function() {
  return /** @type {!proto.com.devshop.service.common.contracts.AnyDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string canonical_name = 1;
 * @return {string}
 */
proto.com.devshop.service.common.contracts.AnyDto.prototype.getCanonicalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.com.devshop.service.common.contracts.AnyDto.prototype.setCanonicalName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.com.devshop.service.common.contracts.AnyDto.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.com.devshop.service.common.contracts.AnyDto.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.com.devshop.service.common.contracts.AnyDto.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value  */
proto.com.devshop.service.common.contracts.AnyDto.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.devshop.service.common.contracts.TimestampDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.devshop.service.common.contracts.TimestampDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.devshop.service.common.contracts.TimestampDto.displayName = 'proto.com.devshop.service.common.contracts.TimestampDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.TimestampDto.prototype.toObject = function(opt_includeInstance) {
  return proto.com.devshop.service.common.contracts.TimestampDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.devshop.service.common.contracts.TimestampDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.TimestampDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: msg.getSeconds(),
    nanos: msg.getNanos()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.devshop.service.common.contracts.TimestampDto}
 */
proto.com.devshop.service.common.contracts.TimestampDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.devshop.service.common.contracts.TimestampDto;
  return proto.com.devshop.service.common.contracts.TimestampDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.devshop.service.common.contracts.TimestampDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.devshop.service.common.contracts.TimestampDto}
 */
proto.com.devshop.service.common.contracts.TimestampDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.com.devshop.service.common.contracts.TimestampDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.TimestampDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.devshop.service.common.contracts.TimestampDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.TimestampDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getNanos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.com.devshop.service.common.contracts.TimestampDto} The clone.
 */
proto.com.devshop.service.common.contracts.TimestampDto.prototype.cloneMessage = function() {
  return /** @type {!proto.com.devshop.service.common.contracts.TimestampDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.com.devshop.service.common.contracts.TimestampDto.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.com.devshop.service.common.contracts.TimestampDto.prototype.setSeconds = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 nanos = 2;
 * @return {number}
 */
proto.com.devshop.service.common.contracts.TimestampDto.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.com.devshop.service.common.contracts.TimestampDto.prototype.setNanos = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.devshop.service.common.contracts.DecimalDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.devshop.service.common.contracts.DecimalDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.devshop.service.common.contracts.DecimalDto.displayName = 'proto.com.devshop.service.common.contracts.DecimalDto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.DecimalDto.prototype.toObject = function(opt_includeInstance) {
  return proto.com.devshop.service.common.contracts.DecimalDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.devshop.service.common.contracts.DecimalDto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.com.devshop.service.common.contracts.DecimalDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    unscaledValue: msg.getUnscaledValue(),
    scale: msg.getScale()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.devshop.service.common.contracts.DecimalDto}
 */
proto.com.devshop.service.common.contracts.DecimalDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.devshop.service.common.contracts.DecimalDto;
  return proto.com.devshop.service.common.contracts.DecimalDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.devshop.service.common.contracts.DecimalDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.devshop.service.common.contracts.DecimalDto}
 */
proto.com.devshop.service.common.contracts.DecimalDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnscaledValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.com.devshop.service.common.contracts.DecimalDto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.DecimalDto.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.devshop.service.common.contracts.DecimalDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.com.devshop.service.common.contracts.DecimalDto.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUnscaledValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getScale();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.com.devshop.service.common.contracts.DecimalDto} The clone.
 */
proto.com.devshop.service.common.contracts.DecimalDto.prototype.cloneMessage = function() {
  return /** @type {!proto.com.devshop.service.common.contracts.DecimalDto} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 unscaled_value = 1;
 * @return {number}
 */
proto.com.devshop.service.common.contracts.DecimalDto.prototype.getUnscaledValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.com.devshop.service.common.contracts.DecimalDto.prototype.setUnscaledValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 scale = 2;
 * @return {number}
 */
proto.com.devshop.service.common.contracts.DecimalDto.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.com.devshop.service.common.contracts.DecimalDto.prototype.setScale = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.com.devshop.service.common.contracts.OperationTypeDto = {
  RPC: 0,
  REQUEST_STREAM: 1,
  STREAM: 2
};

goog.object.extend(exports, proto.com.devshop.service.common.contracts);
